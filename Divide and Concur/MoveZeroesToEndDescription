Implement a problem of move all zeroes to end of array. 
Statement: Given an array of random numbers, Push all the zeroâ€™s of a given array to the end of the array. For example, if the given arrays is {1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0}, it should be changed to {1, 9, 8, 4, 2, 7, 6, 0, 0, 0, 0}. The order of all other elements should be same.  
Input :  arr[] = {1, 2, 0, 4, 3, 0, 5, 0}; 
Output : arr[] = {1, 2, 4, 3, 5, 0, 0, 0}; 


To solve the problem of moving all zeroes to the end of the array while maintaining the order of the other elements, using a divide and conquer approach, you can partition the array into non-zero and zero elements. The main idea is to rearrange the elements recursively until the array is fully processed.

However, a more straightforward approach to using divide and conquer principles might not be as efficient for this specific problem, as the problem can be handled effectively with a linear traversal. Nevertheless, I can show you how to implement this using a modified approach that incorporates divide and conquer principles.

Approach:
1)Divide: Recursively partition the array into two halves.
2)Conquer: Process each half to move zeroes to the end of that segment.
3)Combine: Merge the two halves while ensuring that all zeroes are moved to the end

Explanation:
moveZeroes Method:

It divides the array into two halves recursively.
The base case is when the segment of the array has 1 or 0 elements.
After dividing, it merges the two halves while ensuring that zeroes are moved to the end.
mergeAndMoveZeroes Method:

It creates a temporary array to merge two halves.
First, it adds all non-zero elements to the temporary array.
It then appends zeroes to the end of this array.
Finally, it copies the temporary array back to the original array segment.

 time complexity of the algorithm is O(n log n).
