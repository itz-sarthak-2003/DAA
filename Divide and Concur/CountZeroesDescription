Implement a problem of number of zeroes.
Statement: Given an array of 1s and 0s which has all 1s first
followed by all 0s? Find the number of 0s. Count the number of
zeroes in the given array.
Input: arr[] = {1, 1, 1, 1, 0, 0} Output: 2
Input: arr[] = {1, 0, 0, 0, 0} Output: 4   using divide and concur tecnique in java


To solve the problem of counting the number of zeroes in an array of 1s followed by 0s using the divide and conquer technique, I can use a binary search approach. This technique efficiently finds the first occurrence of 0 and then counts the number of zeroes.

Steps:
Use binary search to find the first occurrence of 0 in the array.
Once the first occurrence of 0 is found, the number of zeroes is simply the difference between the array length and the index of the first 0

Explanation:
findFirstZero Method:

This is a recursive function that performs a binary search to find the first occurrence of 0.
It checks if the middle element is 0 and whether it is the first 0 (i.e., either it's the first element of the array, or the element before it is 1).
If the middle element is 1, it searches the right half; otherwise, it searches the left half.
countZeroes Method:

It calls the findFirstZero method to get the index of the first 0.
The number of zeroes is the difference between the array's length and the index of the first 0.

Time Complexity=
This approach has a time complexity of O(log n), which is much more efficient than a linear search for large arrays.

